// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: urls.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSessionUrl = `-- name: CreateSessionUrl :one
INSERT INTO urls (
  id, url, event_name, domain_session_id, created_at, updated_at
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, event_name, url, created_at, updated_at, domain_session_id
`

type CreateSessionUrlParams struct {
	ID              uuid.UUID
	Url             string
	EventName       string
	DomainSessionID uuid.UUID
	CreatedAt       time.Time
	UpdatedAt       time.Time
}

func (q *Queries) CreateSessionUrl(ctx context.Context, arg CreateSessionUrlParams) (Url, error) {
	row := q.db.QueryRowContext(ctx, createSessionUrl,
		arg.ID,
		arg.Url,
		arg.EventName,
		arg.DomainSessionID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.EventName,
		&i.Url,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DomainSessionID,
	)
	return i, err
}

const getPageViewCount = `-- name: GetPageViewCount :one
SELECT 
  COUNT(CASE WHEN s.session_start_time >= $2 THEN 1 ELSE NULL END) AS total_page_views,
  COUNT(CASE WHEN s.session_start_time >= $3 AND s.session_start_time < $2  THEN 1 ELSE NULL END) AS total_page_views_prior
FROM urls u LEFT JOIN domain_sessions s
ON u.domain_session_id = s.id
WHERE s.domain_id = $1
`

type GetPageViewCountParams struct {
	DomainID        uuid.UUID
	Interval        time.Time
	CompareInterval time.Time
}

type GetPageViewCountRow struct {
	TotalPageViews      int64
	TotalPageViewsPrior int64
}

func (q *Queries) GetPageViewCount(ctx context.Context, arg GetPageViewCountParams) (GetPageViewCountRow, error) {
	row := q.db.QueryRowContext(ctx, getPageViewCount, arg.DomainID, arg.Interval, arg.CompareInterval)
	var i GetPageViewCountRow
	err := row.Scan(&i.TotalPageViews, &i.TotalPageViewsPrior)
	return i, err
}
